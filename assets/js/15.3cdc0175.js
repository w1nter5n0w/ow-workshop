(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{204:function(v,_,a){"use strict";a.r(_);var t=a(0),e=Object(t.a)({},function(){var v=this,_=v.$createElement,a=v._self._c||_;return a("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[a("h2",{attrs:{id:"矢量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#矢量","aria-hidden":"true"}},[v._v("#")]),v._v(" 矢量")]),v._v(" "),a("p",[v._v("矢量是一个由三个数字组成的、有方向的量。在OW中，矢量更类似于一个三维坐标点。又分为本地矢量和地图矢量。")]),v._v(" "),a("p",[v._v("本地矢量即原点位于玩家位置，玩家面对方向为Z轴正方向的坐标系。如图所示：")]),v._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2019/05/02/5ccae0fceed41.png",alt:"1.png"}})]),v._v(" "),a("p",[v._v("在这张图中，Z轴正方向为玩家面对的方向。X轴正方向为玩家左侧。Y轴正方向为玩家上方。例如：")]),v._v(" "),a("ul",[a("li",[v._v("坐标(1,1,1)位于玩家的左、前、上方向。")]),v._v(" "),a("li",[v._v("图中的F点坐标为(-1,2,-1)，位于玩家的右、后、上方向。")])]),v._v(" "),a("p",[v._v("请注意，本地矢量的XoZ平面与地图矢量的XoZ平面完全重合，不会因为玩家低头或仰头改变。")]),v._v(" "),a("p",[v._v("本地矢量和地图矢量可以通过函数“地图矢量”和“本地矢量”互相转换。")]),v._v(" "),a("h2",{attrs:{id:"向量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#向量","aria-hidden":"true"}},[v._v("#")]),v._v(" 向量")]),v._v(" "),a("p",[v._v("矢量和向量其实是一个东西。在OW中，向量可以用来方便的表示一个矢量到另一个矢量的方向。")]),v._v(" "),a("p",[v._v("即："),a("code",[v._v("向量(A, B)=矢量(Xb - Xa, Yb - Ya, Zb - Za)")])]),v._v(" "),a("h2",{attrs:{id:"其他技巧"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他技巧","aria-hidden":"true"}},[v._v("#")]),v._v(" 其他技巧")]),v._v(" "),a("ul",[a("li",[v._v("你可以使用矢量积取得两个矢量的垂直方向")]),v._v(" "),a("li",[v._v("你可以使用标量积判断两个矢量之间的夹角大小\n"),a("ul",[a("li",[a("code",[v._v("a · b > 0")]),v._v("方向基本相同，夹角在0°到90°之间")]),v._v(" "),a("li",[a("code",[v._v("a · b = 0")]),v._v("正交，相互垂直")]),v._v(" "),a("li",[a("code",[v._v("a · b < 0")]),v._v("方向基本相反，夹角在90°到180°之间")])])]),v._v(" "),a("li",[v._v("你可以使用上、下、左、右、前、后来代替手动写X、Y、Z坐标")]),v._v(" "),a("li",[v._v("你可以使用"),a("code",[v._v("乘(上, 矢量A)")]),v._v("来取得矢量A的Z方向矢量。以此类推，例如当你需要让英雄面向地图的正Z方向，但不需要改变英雄的X、Y方向时，可以使用"),a("code",[v._v("乘(矢量(1, 1, 0), 面朝方向(事件玩家))")]),v._v("方便编写。")])]),v._v(" "),a("h2",{attrs:{id:"示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#示例","aria-hidden":"true"}},[v._v("#")]),v._v(" 示例")]),v._v(" "),a("p",[v._v("举个例子，我们希望实现一个效果：伤害敌人造成击退。假设A击中B时，我们希望让B在A-B向量上移动10单位。")]),v._v(" "),a("h3",{attrs:{id:"击退：使用向量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#击退：使用向量","aria-hidden":"true"}},[v._v("#")]),v._v(" 击退：使用向量")]),v._v(" "),a("p",[v._v("事件")]),v._v(" "),a("ul",[a("li",[v._v("玩家受到伤害")]),v._v(" "),a("li",[v._v("队伍 双方 全部")])]),v._v(" "),a("p",[v._v("动作")]),v._v(" "),a("ul",[a("li",[v._v("施加推力(事件玩家, 向量(位置(攻击方), 位置(事件玩家)), 10, 至地图, 取消相反运动)")])]),v._v(" "),a("h3",{attrs:{id:"击退：手动计算矢量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#击退：手动计算矢量","aria-hidden":"true"}},[v._v("#")]),v._v(" 击退：手动计算矢量")]),v._v(" "),a("p",[v._v("事件")]),v._v(" "),a("ul",[a("li",[v._v("玩家受到伤害")]),v._v(" "),a("li",[v._v("队伍 双方 全部")])]),v._v(" "),a("p",[v._v("动作")]),v._v(" "),a("ul",[a("li",[v._v("施加推力(事件玩家, 矢量(减(X方向分量(位置(攻击方)), X方向分量(位置(事件玩家))), 减(Y方向分量(位置(攻击方)), Y方向分量(位置(事件玩家))), 减(Z方向分量(位置(攻击方)), Z方向分量(位置(事件玩家)))), 10, 至地图, 取消相反运动)")])]),v._v(" "),a("h3",{attrs:{id:"三角函数计算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三角函数计算","aria-hidden":"true"}},[v._v("#")]),v._v(" 三角函数计算")]),v._v(" "),a("p",[v._v("我们演示一下三角函数的使用。因为比较复杂，特别是OW中编写就更复杂了，所以实际上不会这样写，仅作为参考：")]),v._v(" "),a("ul",[a("li",[v._v("通过“向量”我们可以得到一个方向，假设是向量A(X,Y,Z)。")]),v._v(" "),a("li",[v._v("余弦：计算向量A与向量(0,Y,Z)的夹角（即向量A与Y-Z平面的夹角），则可以得出Z方向位移=总距离*cos(夹角)")]),v._v(" "),a("li",[v._v("正弦：计算向量A与向量(X,Y,0)的夹角（即向量A与X-Y平面的夹角），则可以得出Z方向位移=总距离*sin(夹角)")])]),v._v(" "),a("p",[v._v("正弦和余弦可以这样计算：")]),v._v(" "),a("ul",[a("li",[a("code",[v._v("sin = a × b / |a||b|")]),v._v("，可以使用矢量积函数帮助计算")]),v._v(" "),a("li",[a("code",[v._v("cos = a · b / |a||b|")]),v._v("，可以使用标量积函数帮助计算")])])])},[],!1,null,null,null);_.default=e.exports}}]);